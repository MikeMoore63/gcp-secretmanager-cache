# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]
  push:
    tags:
      - v*

permissions:
  contents: read

jobs:
  build_dist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist and wheel
        run: pipx run build

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*
  deploy:
    needs: [build_dist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pygobuildinfo
    permissions:
      id-token: write
    # if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
        # To test: repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true
          verify-metadata: true
